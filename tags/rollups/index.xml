<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rollups on wborgeaud</title>
    <link>https://solvable.group/tags/rollups/</link>
    <description>Recent content in rollups on wborgeaud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 25 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://solvable.group/tags/rollups/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The case for centralized rollups</title>
      <link>https://solvable.group/posts/centralized-rollups/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://solvable.group/posts/centralized-rollups/</guid>
      <description>Common wisdom is that rollups should be decentralized. In fact, most rollups have decentralization of sequencers/validators/provers on their roadmap. In this post, I argue that fully centralized rollups are viable and secure.
What does a centralized rollup look like? In a centralized rollup, a single actor controls sequencing and block production. Users send transactions directly to this actor, i.e, there is no public mempool. This actor then constructs a block with some of the transactions it has received and pushes them to L1, along with a state transition validity proof in the case of a zk-rollup.</description>
    </item>
    
  </channel>
</rss>
