<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>math on wborgeaud</title>
    <link>https://solvable.group/tags/math/</link>
    <description>Recent content in math on wborgeaud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solvable.group/tags/math/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Walsh–Hadamard transform</title>
      <link>https://solvable.group/posts/walshhadamard-transform/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solvable.group/posts/walshhadamard-transform/</guid>
      <description>In the ZKP world, we often use the Fast Fourier Transform (FFT) to go from univariate polynomials to their evaluations on a subgroup. The FFT has a less notorious analogue for multilinear polynomials: the Walsh–Hadamard transform (WHT). In this post, I&amp;rsquo;ll describe the WHT and explore its applications.
Univariate polynomials Let $\mathbb{F}$ be a finite field and let $H&amp;lt;\mathbb{F}^*$ be a multiplicative subgroup of size $n=2^v$. Given a polynomial $f\in \mathbb{F}[X]^{&amp;lt;n}$ of degree less than $n$, we can use the FFT to compute its evaluation on $H$:</description>
    </item>
    
    <item>
      <title>Applications of Riemann-Roch in cryptography</title>
      <link>https://solvable.group/posts/riemann-roch-crypto/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solvable.group/posts/riemann-roch-crypto/</guid>
      <description>$$ \def\F{\mathbb{F}} \def\L{\mathcal{L}} \def\C{\mathcal{C}} $$
The Riemann-Roch theorem is a fundamental result in the study of curves. In this post, I&amp;rsquo;ll go through some of its applications in cryptography.
Divisors and the Riemann-Roch theorem Let $C$ be an algebraic curve, i.e., a smooth projective variety of dimension one over a field $K$1. The group of divisors $Div(C)$ is the free abelian group generated by points of $C$, i.e., elements of $Div(C)$ look like $D = \sum_{P\in C} n_P P$ where $n_P\in \mathbb{Z}$ is non-zero for only finitely many $P\in C$.</description>
    </item>
    
    <item>
      <title>ECFFT on the BN254 base field in Rust</title>
      <link>https://solvable.group/posts/ecfft-bn254/</link>
      <pubDate>Sat, 16 Oct 2021 00:57:25 -0700</pubDate>
      
      <guid>https://solvable.group/posts/ecfft-bn254/</guid>
      <description>$$ \def\F{\mathbb{F}} $$
tl;dr: A Rust implementation of the ECFFT here: https://github.com/wborgeaud/ecfft-bn254.
The last post was about the ECFFT algorithm by Eli Ben-Sasson, Dan Carmon, Swastik Kopparty and David Levit. At the end of the post, I mentioned that it would be fairly straightforward to implement the ECFFT algorithms in low-level languages like Rust by doing all the mathematical precomputations in Sage.
Well I have done exactly that and implemented the EXTEND and ENTER operations in Rust for the base field of the BN254 curve.</description>
    </item>
    
    <item>
      <title>The ECFFT algorithm</title>
      <link>https://solvable.group/posts/ecfft/</link>
      <pubDate>Sat, 07 Aug 2021 00:57:25 -0700</pubDate>
      
      <guid>https://solvable.group/posts/ecfft/</guid>
      <description>$$ \def\F{\mathbb{F}} $$
This post is about a recent paper by Eli Ben-Sasson, Dan Carmon, Swastik Kopparty and David Levit. In this paper the authors present an amazing new generalization of the classic FFT algorithm that works in all finite fields. This post will give an overview of the algorithm and a simple implementation in Sage. I highly recommend reading the paper for more details and background.
The classic FFT algorithm Let $p$ be a prime number, $n=2^k$ with $n \mid p-1$, $\langle w \rangle = H &amp;lt; \F_p^*$ a subgroup of size $n$.</description>
    </item>
    
  </channel>
</rss>
