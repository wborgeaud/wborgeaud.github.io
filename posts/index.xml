<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on wborgeaud</title>
    <link>https://solvable.group/posts/</link>
    <description>Recent content in Posts on wborgeaud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://solvable.group/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Applications of Riemann-Roch in cryptography</title>
      <link>https://solvable.group/posts/riemann-roch-crypto/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://solvable.group/posts/riemann-roch-crypto/</guid>
      <description>$$ \def\F{\mathbb{F}} \def\L{\mathcal{L}} \def\C{\mathcal{C}} $$
The Riemann-Roch theorem is a fundamental result in the study of curves. In this post, I&amp;rsquo;ll go through some of its applications in cryptography.
Divisors and the Riemann-Roch theorem Let $C$ be an algebraic curve, i.e., a smooth projective variety of dimension one over a field $K$1. The group of divisors $Div(C)$ is the free abelian group generated by points of $C$, i.e., elements of $Div(C)$ look like $D = \sum_{P\in C} n_P P$ where $n_P\in \mathbb{Z}$ is non-zero for only finitely many $P\in C$.</description>
    </item>
    
    <item>
      <title>Proving AIRs with multivariate sumchecks</title>
      <link>https://solvable.group/posts/air-multivariate-sumcheck/</link>
      <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://solvable.group/posts/air-multivariate-sumcheck/</guid>
      <description>Algebraic Intermediate Representation (AIR) is a powerful arithmetization that can be extended to Randomized Air with Preprocessing (RAP), which includes popular systems like PLONK. See this great note by Ariel Gabizon for descriptions of these arithmetizations.
Another popular arithmetization is given by R1CS. Two categories of proving systems based on R1CS are those using multivariate techniques (e.g. Spartan) and those using univariate techniques (e.g. Marlin).
To the best of my knowledge, every current AIR-based proving system uses univariate techniques.</description>
    </item>
    
    <item>
      <title>The case for centralized rollups</title>
      <link>https://solvable.group/posts/centralized-rollups/</link>
      <pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://solvable.group/posts/centralized-rollups/</guid>
      <description>Conventional wisdom is that rollups should be decentralized. In fact, most rollups have decentralization of sequencers/validators/provers on their roadmaps. In this post, I argue that fully centralized rollups are viable and secure.
What does a centralized rollup look like? In a centralized rollup, a single actor controls sequencing and block production. Users send transactions directly to this actor, i.e, there is no public mempool. This actor then constructs a block with some of the transactions it has received and pushes them to L1, along with a state transition validity proof in the case of a zk-rollup.</description>
    </item>
    
    <item>
      <title>ECFFT on the BN254 base field in Rust</title>
      <link>https://solvable.group/posts/ecfft-bn254/</link>
      <pubDate>Sat, 16 Oct 2021 00:57:25 -0700</pubDate>
      
      <guid>https://solvable.group/posts/ecfft-bn254/</guid>
      <description>$$ \def\F{\mathbb{F}} $$
tl;dr: A Rust implementation of the ECFFT here: https://github.com/wborgeaud/ecfft-bn254.
The last post was about the ECFFT algorithm by Eli Ben-Sasson, Dan Carmon, Swastik Kopparty and David Levit. At the end of the post, I mentioned that it would be fairly straightforward to implement the ECFFT algorithms in low-level languages like Rust by doing all the mathematical precomputations in Sage.
Well I have done exactly that and implemented the EXTEND and ENTER operations in Rust for the base field of the BN254 curve.</description>
    </item>
    
    <item>
      <title>The ECFFT algorithm</title>
      <link>https://solvable.group/posts/ecfft/</link>
      <pubDate>Sat, 07 Aug 2021 00:57:25 -0700</pubDate>
      
      <guid>https://solvable.group/posts/ecfft/</guid>
      <description>$$ \def\F{\mathbb{F}} $$
This post is about a recent paper by Eli Ben-Sasson, Dan Carmon, Swastik Kopparty and David Levit. In this paper the authors present an amazing new generalization of the classic FFT algorithm that works in all finite fields. This post will give an overview of the algorithm and a simple implementation in Sage. I highly recommend reading the paper for more details and background.
The classic FFT algorithm Let $p$ be a prime number, $n=2^k$ with $n \mid p-1$, $\langle w \rangle = H &amp;lt; \F_p^*$ a subgroup of size $n$.</description>
    </item>
    
    <item>
      <title>Cairo Games Vol 2: Writeup</title>
      <link>https://solvable.group/posts/cairo-games-vol2/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://solvable.group/posts/cairo-games-vol2/</guid>
      <description>Here are my solutions to the second edition of the Cairo Games.
 Nu (Easy) Pakhet (Easy) Seth (Medium) Montu (Medium) Amun (Hard)  Nu This problem was pretty straightforward. We have to find to integers x,y&amp;lt;2^128 such that x*y=17 in the prime field used by Cairo. We can easily get such a pair as follows:
from sympy import divisors P = 2**251 + 17 * 2**192 + 1 BOUND = 2**128 target = P + 17 for d in divisors(target): n = target // d if n &amp;lt; BOUND and d &amp;lt; BOUND: break ids.</description>
    </item>
    
    <item>
      <title>Donjon CTF Writeup: Secret RNG</title>
      <link>https://solvable.group/posts/secret-rng/</link>
      <pubDate>Sat, 31 Oct 2020 03:57:25 -0700</pubDate>
      
      <guid>https://solvable.group/posts/secret-rng/</guid>
      <description>TLDR This was a very nice challenge in the Donjon CTF. The goal was to reverse engineer the state of the PRNG math/rand in the Go standard library to guess the private key of a signature scheme and sign a given message. I solved this challenge by using the SMT solver Z3 to automagically recover the RNG state.
Description Connecting to nc ots-sig.donjon-ctf.io 4001, we get:
Public key: djX6vqVMj0fTZGIhJFgN1VHLgGgaBxWEhvxp1MzB09s= Enter signature: test You failed!</description>
    </item>
    
    <item>
      <title>Isogeny-based crypto Part 1: The SIDH protocol</title>
      <link>https://solvable.group/posts/isobeg/</link>
      <pubDate>Sat, 10 Oct 2020 03:57:25 -0700</pubDate>
      
      <guid>https://solvable.group/posts/isobeg/</guid>
      <description>This is the first post in a series on isogeny-based crypto. Instead of writing yet another introduction, I redirect you instead to the great introduction to SIDH by Craig Costello: Supersingular isogeny key exchange for beginners.
Today&amp;rsquo;s post will then be in the form of a Sage notebook walking through the examples in the paper. This also gives a good intro to how isogenies work in Sage.
The notebook source is available here: github.</description>
    </item>
    
    <item>
      <title>Anomalous Curves Part 3: Formal groups</title>
      <link>https://solvable.group/posts/anomalous-curves-3/</link>
      <pubDate>Wed, 29 Apr 2020 08:57:07 -0700</pubDate>
      
      <guid>https://solvable.group/posts/anomalous-curves-3/</guid>
      <description>$$ \def\F{\mathbb{F}} $$
$$ \def\Q{\mathbb{Q}} \def\F{\mathbb{F}} \def\Z{\mathbb{Z}} \def\M{\mathcal{M}} \def\G{\hat{\mathbb{G}}} \def\O{\mathcal{O}} $$
This is part three of the series on anomalous curves. Go here for part one and here for part two.
Today, I&amp;rsquo;ll prove the two missing results from the last post:
 Theorem (VII.2.2 in Silverman): There is a group structure on $p\Z_p$ (that we denote $\hat{E}(p\Z_p)$) such that the map $$ E_1(\Q_p) \to \hat{E}(p\Z_p): [x:y:1] \mapsto -\frac x y $$ is a group isomorphism, that also induces isomorphisms $E_n(\Q_p)\to \hat{E}(p^n\Z_p)$.</description>
    </item>
    
    <item>
      <title>Anomalous Curves Part 2: p-adic niceties</title>
      <link>https://solvable.group/posts/anomalous-curves-2/</link>
      <pubDate>Wed, 22 Apr 2020 13:57:07 -0700</pubDate>
      
      <guid>https://solvable.group/posts/anomalous-curves-2/</guid>
      <description>$$ \def\F{\mathbb{F}} $$
$$ \def\Q{\mathbb{Q}} \def\F{\mathbb{F}} \def\Z{\mathbb{Z}} $$
This is part two of the series on anomalous curves. Go here for part one.
Today, I&amp;rsquo;ll give a sketch of the construction of Smart&amp;rsquo;s attack. This attack combines two elliptic curve tools:
 The reduction map of an elliptic curve over a local field. The formal group of an elliptic curve.  I will focus on the first one, and leave the details of the second for another post.</description>
    </item>
    
    <item>
      <title>Anomalous Curves Part 1: Don&#39;t be clever with your elliptic curve order</title>
      <link>https://solvable.group/posts/anomalous-curves-1/</link>
      <pubDate>Tue, 21 Apr 2020 13:57:07 -0700</pubDate>
      
      <guid>https://solvable.group/posts/anomalous-curves-1/</guid>
      <description>$$ \def\F{\mathbb{F}} $$
Have you ever been confused by the numbers $p,q,r$ in a paper dealing with elliptic curves? Some paper use $q$ for the order of the elliptic curve over a field of order $p$. Conveniently, other papers use the exact opposite notation, while some get original and use $r$ for the field size, or the order of a subgroup of the curve, or something else&amp;hellip;
What if I told you there are curves where $p=q=r$?</description>
    </item>
    
    <item>
      <title>Membership proofs from polynomial commitments</title>
      <link>https://solvable.group/posts/membership-proofs-from-polynomial-commitments/</link>
      <pubDate>Thu, 16 Apr 2020 13:57:25 -0700</pubDate>
      
      <guid>https://solvable.group/posts/membership-proofs-from-polynomial-commitments/</guid>
      <description>$$ \def\com{\mathbf{com}} $$
Recently, Dan Boneh, Ben Fisch, Ariel Gabizon, and Zac Williamson (BFGW) published a writeup showing how to create range proofs from polynomial commitments. As a mental exercise, I wanted to see how to use polynomial commitments to create membership proofs instead. Membership proofs can be seen as a generalization of range proofs, if certain homomorphic properties hold (that&amp;rsquo;s something I learned first from this article). For example for Pedersen commitments, we have:</description>
    </item>
    
    <item>
      <title>Understanding Verifiable Delay Functions (with a Rust implementation)</title>
      <link>https://solvable.group/posts/understanding-vdfs/</link>
      <pubDate>Sat, 30 Nov 2019 13:57:25 -0700</pubDate>
      
      <guid>https://solvable.group/posts/understanding-vdfs/</guid>
      <description>I have been reading about Verifiable Delay Functions (VDF) recently and wanted to write a short post explaining what they are and what they can be used for. This post relies mainly on the papers: Efficient verifiable delay functions, Wesolowski and A Survey of Two Verifiable Delay Functions, Boneh et al. I also recommend this podcast with Joseph Bonneau.
Definition A VDF is a function $f_T: \mathcal{X} \to \mathcal{Y}$ that takes a long time to compute but is fast to verify.</description>
    </item>
    
    <item>
      <title>Use Rust in React Native through WebAssembly</title>
      <link>https://solvable.group/posts/rust-wasm-react-native/</link>
      <pubDate>Thu, 14 Nov 2019 13:57:25 -0700</pubDate>
      
      <guid>https://solvable.group/posts/rust-wasm-react-native/</guid>
      <description>This post shows how to use Rust functions in a React Native project through WebAssembly. I struggled quite a bit to find an easy way to make it work, so I thought I&amp;rsquo;d share my findings. You can find the code for this post here.
Here&amp;rsquo;s the TLDR:
 Create a wasm-pack project exposing the Rust functions you want to export. Serve a web page exposing these functions through message events.</description>
    </item>
    
  </channel>
</rss>
